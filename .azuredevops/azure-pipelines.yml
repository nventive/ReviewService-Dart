trigger:
  branches:
    include:
      - main
pr:
  branches:
    include:
      - main

variables:
  - template: variables.yml

pool:
  vmImage: ubuntu-latest

steps:
  - task: Hey24sheep.flutter.flutter-install.FlutterInstall@0
    displayName: "Flutter Install"

  - task: gitversion/setup@0
    inputs:
      versionSpec: '5.12.0'
    displayName: 'Install GitVersion'

  - task: gitversion/execute@0
    inputs:
      useConfigFile: true
      configFilePath: .azuredevops/gitversion-config.yml
    displayName: 'Calculate version'

  # Update the version in pubspec.yaml
  - powershell: |
      ((Get-Content -Path pubspec.yaml) -replace '(version:\s*)[\d\.]+', "version: $(GitVersion.MajorMinorPatch)") | Set-Content -Path pubspec.yaml
    displayName: Update version in pubspec.yaml

  # Temporarily commit the updated pubspec.yaml
  - script: |
      git config user.name "Azure DevOps"
      git config user.email "devops@example.com"
      git add pubspec.yaml
      git commit -m "Update version to $(GitVersion.MajorMinorPatch) for CI"
    displayName: Commit updated pubspec.yaml

  - script: flutter doctor
    displayName: Run flutter doctor

  - script: flutter pub get
    displayName: Install dependencies

  - task: PowerShell@2
    displayName: "Execute Build Runner"
    inputs:
      targetType: "inline"
      script: |
        $(DartToolPath)/dart run build_runner build --delete-conflicting-outputs

  - script: flutter analyze
    displayName: Analyze code

  - script: flutter test
    displayName: Run tests

  - script: flutter pub publish --dry-run
    displayName: 'Run flutter pub publish --dry-run'

  - task: DownloadSecureFile@1
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['IsReleaseBranch'], 'true'))
    inputs:
      secureFile: 'flutter_publisher_gckey.json'
    name: DownloadGCloudKey

  - script: | 
      gcloud auth activate-service-account --key-file=$(DownloadGCloudKey.secureFilePath)
      gcloud auth print-identity-token --audiences=https://pub.dev | dart pub token add https://pub.dev
      dart pub publish --force
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['IsReleaseBranch'], 'true'))
    displayName: 'Publish to pub.dev as a nventive publisher'

  # Reset the repository to its original state
  - script: |
      git reset --hard HEAD~1
    displayName: Reset repository to clean state

  - task: PostBuildCleanup@3
    displayName: 'Post-Build Cleanup: Cleanup files to keep build server clean!'
    condition: always()